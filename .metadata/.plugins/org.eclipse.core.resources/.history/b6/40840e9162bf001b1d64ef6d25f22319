package ACSL19_20;
import java.io.*;
public class AllStar1_SpotTheY {
	static int[][] grid;
    static int count;
    static int n;
    public static void main(String[] args) throws IOException {
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	int n = Integer.parseInt(br.readLine().trim());
    	String line = br.readLine();
    	int result = spot_the_y(n, line);
    	System.out.println(result);
    	br.close();
    }
    public static int spot_the_y(int num, String line) {
        if(num < 3)
            return 0;
        grid = new int[num][num];
        count = 0;
        n = num;
        String[] st = line.split(" ");
        for(int i = 0; i < st.length; i++) {
            int index = Integer.parseInt(st[i]) - 1;
            if(i % 2 == 0)
                grid[index / n][index % n] = grid[index / n][index % n] == 0 ? 1 : 0;
            else
                grid[index / n][index % n] = grid[index / n][index % n] == 0 ? 2 : 0;
            if(checkForY1() || checkForY2() || checkForY3() || checkForY4())
                break;
        }
        return count;
    }
    public static boolean checkForY1() {
        for(int i = 0; i < n - 2; i++) {
            for(int j = 0; j < n - 2; j++) {
                if(grid[i][j + 1] == 1 && grid[i + 1][j + 1] == 1 && grid[i + 2][j] == 1 && grid[i + 2][j + 2] == 1 || 
                		grid[i][j + 1] == 2 && grid[i + 1][j + 1] == 2 && grid[i + 2][j] == 2 && grid[i + 2][j + 2] == 2) {
                    count = (i * n + j + 1) + ((i + 1) * n + j + 1) + ((i + 2) * n + j) + ((i + 2) * n + j + 2) + 4;
                    return true;
                }
            }
        }
        return false;
    }
    public static boolean checkForY2() {
        for(int i = 0; i < n - 2; i++) {
            for(int j = 0; j < n - 2; j++) {
                if(grid[i][j] == 1 && grid[i][j + 2] == 1 && grid[i + 1][j + 1] == 1 && grid[i + 2][j + 1] == 1 || 
                		grid[i][j] == 2 && grid[i][j + 2] == 2 && grid[i + 1][j + 1] == 2 && grid[i + 2][j + 1] == 2) {
                    count = (i * n + j) + (i * n + j + 2) + ((i + 1) * n + j + 1) + ((i + 2) * n + j + 1) + 4;
                    return true;
                }
            }
        }
        return false;
    }
    public static boolean checkForY3() {
        for(int i = 0; i < n - 2; i++) {
            for(int j = 0; j < n - 2; j++) {
                if(grid[i][j] == 1 && grid[i + 2][j] == 1 && grid[i + 1][j + 1] == 1 && grid[i + 1][j + 2] == 1 || 
                		grid[i][j] == 2 && grid[i + 2][j] == 2 && grid[i + 1][j + 1] == 2 && grid[i + 1][j + 2] == 2) {
                    count = (i * n + j) + ((i + 1) * n + j + 1) + ((i + 1) * n + j + 2) + ((i + 2) * n + j) + 4;
                    return true;
                }
            }
        }
        return false;
    }
   public static boolean checkForY4() {
        for(int i = 0; i < n - 2; i++) {
            for(int j = 0; j < n - 2; j++) {
                if(grid[i + 1][j] == 1 && grid[i + 1][j + 1] == 1 && grid[i][j + 2] == 1 && grid[i + 2][j + 2] == 1 || 
                		grid[i + 1][j] == 2 && grid[i + 1][j + 1] == 2 && grid[i][j + 2] == 2 && grid[i + 2][j + 2] == 2) {
                    count = ((i + 1) * n + j) + ((i + 1) * n + j + 1) + (i * n + j + 2) + ((i + 2) * n + j + 2) + 4;
                    return true;
                }
            }
        }
        return false;
    }
}