package ACSL18_19;
import java.util.*;
import java.io.*;
public class AllStar4_DigitExpressions {
	@SuppressWarnings({ "rawtypes", "unchecked" })
    public static void main(String[] args) throws IOException {
    	BufferedReader br = new BufferedReader(new FileReader(new File("1819AllStar4.in")));
    	for(int i = 0; i < 1; i++) {
    		int cnt = 0;
    		String input = br.readLine();
			ArrayList<ArrayList> expressions = new ArrayList<ArrayList>();
			for(int j = 1; j < input.length(); j++) {
				ArrayList<String> expression = new ArrayList<String>();
				expression.add(input.substring(0, j));
				expression.add(input.substring(j));
				expressions.add(expression);
			}
			for(int j = 1; j < input.length() - 1; j++) {
				for(int k = j + 1; k < input.length(); k++) {
					ArrayList<String> expression = new ArrayList<String>();
					expression.add(input.substring(0, j));
					expression.add(input.substring(j, k));
					expression.add(input.substring(k));
					expressions.add(expression);
				}
			}
			for(int j = 1; j < input.length() - 2; j++) {
				for(int k = j + 1; k < input.length() - 1; k++) {
					for(int l = k + 1; l < input.length(); l++) {
						ArrayList<String> expression = new ArrayList<String>();
						expression.add(input.substring(0, j));
						expression.add(input.substring(j, k));
						expression.add(input.substring(k, l));
						expression.add(input.substring(l));
						expressions.add(expression);
					}
				}
			}
			for(int j = 0; j < expressions.size(); j++) {
				ArrayList<String> expression = new ArrayList<String>();
				expression.addAll(expressions.get(j));
				if(expression.size() == 2) {
					if(expression.get(0).charAt(0) == '0' || expression.get(1).charAt(0) == '0')
						continue;
					System.out.println(expression.toString());
					if(Long.parseLong(expression.get(0)) + Long.parseLong(expression.get(1)) > 0)
						++cnt;
					if(Long.parseLong(expression.get(0)) - Long.parseLong(expression.get(1)) > 0)
						++cnt;
					if(Long.parseLong(expression.get(0)) * Long.parseLong(expression.get(1)) > 0)
						++cnt;
				}
				else if(expression.size() == 3) {
					if(expression.get(0).charAt(0) == '0' || expression.get(1).charAt(0) == '0' || expression.get(2).charAt(0) == '0')
						continue;
					System.out.println(expression.toString());
					if(Long.parseLong(expression.get(0)) + Long.parseLong(expression.get(1)) - Long.parseLong(expression.get(2)) > 0)
						++cnt;
					if(Long.parseLong(expression.get(0)) + Long.parseLong(expression.get(1)) * Long.parseLong(expression.get(2)) > 0)
						++cnt;
					if(Long.parseLong(expression.get(0)) - Long.parseLong(expression.get(1)) + Long.parseLong(expression.get(2)) > 0)
						++cnt;
					if(Long.parseLong(expression.get(0)) - Long.parseLong(expression.get(1)) * Long.parseLong(expression.get(2)) > 0)
						++cnt;
					if(Long.parseLong(expression.get(0)) * Long.parseLong(expression.get(1)) + Long.parseLong(expression.get(2)) > 0)
						++cnt;
					if(Long.parseLong(expression.get(0)) * Long.parseLong(expression.get(1)) - Long.parseLong(expression.get(2)) > 0)
						++cnt;
				}
				else {
					if(expression.get(0).charAt(0) == '0' || expression.get(1).charAt(0) == '0' || expression.get(2).charAt(0) == '0' || 
							expression.get(3).charAt(0) == '0') {
						continue;
					}
					System.out.println(expression.toString());
					if(Long.parseLong(expression.get(0)) + Long.parseLong(expression.get(1)) - Long.parseLong(expression.get(2)) * 
							Long.parseLong(expression.get(3)) > 0) {
						++cnt;
					}
					if(Long.parseLong(expression.get(0)) + Long.parseLong(expression.get(1)) * Long.parseLong(expression.get(2)) - 
							Long.parseLong(expression.get(3)) > 0) {
						++cnt;
					}
					if(Long.parseLong(expression.get(0)) - Long.parseLong(expression.get(1)) + Long.parseLong(expression.get(2)) * 
							Long.parseLong(expression.get(3)) > 0) {
						++cnt;
					}
					if(Long.parseLong(expression.get(0)) - Long.parseLong(expression.get(1)) * Long.parseLong(expression.get(2)) + 
							Long.parseLong(expression.get(3)) > 0) {
						++cnt;
					}
					if(Long.parseLong(expression.get(0)) * Long.parseLong(expression.get(1)) + Long.parseLong(expression.get(2)) - 
							Long.parseLong(expression.get(3)) > 0) {
						++cnt;
					}
					if(Long.parseLong(expression.get(0)) * Long.parseLong(expression.get(1)) - Long.parseLong(expression.get(2)) + 
							Long.parseLong(expression.get(3)) > 0) {
						++cnt;
					}
				}
			}
			System.out.println(cnt);
    	}
    	br.close();
    }
}